{"version":3,"file":"static/js/task.8a29bb67.chunk.js","mappings":"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","sources":["pages/task/containers/AddTodo.jsx","pages/task/containers/Todo.jsx","pages/task/components/TodoList.jsx","pages/task/containers/VisibleTodoList.jsx","pages/task/components/Link.jsx","pages/task/containers/FilterLink.jsx","pages/task/components/Footer.jsx","pages/task/Task.jsx"],"sourcesContent":["import React from 'react'\nimport {connect} from 'react-redux'\nimport {addTodo} from '../../../store/actions'\n\nlet AddTodo = ({dispatch}) => {\n  let input\n\n  return (\n    <div>\n      <form\n        onSubmit={e => {\n          e.preventDefault()\n          if (!input.value.trim()) {\n            return\n          }\n          dispatch(addTodo(input.value))\n          input.value = ''\n        }}\n      >\n        <div className=\"input-group mb-3\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder='please input'\n            ref={node => {\n              input = node\n            }}\n          />\n          <div className=\"input-group-append\">\n            <button type=\"submit\" className={'btn btn-primary'}>Add Todo</button>\n          </div>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nAddTodo = connect()(AddTodo)\n\nexport default AddTodo","import React, {Component} from 'react'\nimport {connect} from \"react-redux\";\nimport {copyTodo, deleteTodo, toggleTodo} from \"../../../store/actions\";\n\nclass Todo extends Component {\n\n  // 第一个是组件初始化(initialization)阶段\n  constructor() {\n    super();\n\n    this.state = {date: new Date()};\n  }\n\n  // 第二个是组件的挂载(Mounting)阶段\n  // 此阶段分为componentWillMount，render，componentDidMount三个时期。\n\n  componentWillMount() {\n    console.log('Todo componentWillMount 即将被装载、渲染到页面上：', this.props);\n  }\n\n  render() {\n    console.log('Todo render');\n    let {completed, text, index, deleteTodo, copyTodo, toggleTodo} = this.props;\n    return (\n      <li className=\"list-group-item\">\n      <span style={{\n        textDecoration: completed ? 'line-through' : 'none'\n      }}>{text}</span>\n        <div style={{float: 'right'}}>\n          <span onClick={() => toggleTodo(index)}>✔️</span>\n          <span onClick={() => deleteTodo(index)}>❌</span>\n          <span onClick={() => copyTodo(index)}>♥️</span>\n        </div>\n      </li>\n    )\n  }\n\n  componentDidMount() {\n    console.log('Todo componentDidMount 挂载：', this.props);\n  }\n\n  // 第三个是组件的更新(update)阶段\n  // componentWillReceiveProps–>shouldComponentUpdate --> componentWillupdate --> componentDidUpdate\n\n  // componentWillReceiveProps中调用 this.setState() 将不会引起第二次渲染。\n  componentWillReceiveProps(nextProps) {\n    console.log('Todo componentWillReceiveProps 父组件重传props时就会调用这个方法');\n  }\n\n  // shouldComponentUpdate:组件接受到新属性或者新状态的时候（可以返回false，接收数据后不更新，阻止render调用，后面的函数不会被继续执行了）\n  // shouldComponentUpdate(nextProps) {\n  //   // if (nextProps.someThings === this.props.someThings) {\n  //   //   return false\n  //   // }\n  //   return true;\n  // }\n\n  // componentWillUpdate:组件即将更新不能修改属性和状态\n  componentWillUpdate(nextProps) {\n    console.log('Todo componentWillUpdate 组件即将更新不能修改属性和状态');\n  }\n\n  // componentDidUpdate:组件已经更新\n  componentDidUpdate(nextProps) {\n    console.log('Todo componentDidUpdate 组件已经更新', JSON.stringify(nextProps));\n  }\n\n  // 卸载阶段\n  componentWillUnmount() {\n    console.log('Todo componentWillUnmount 卸载：', JSON.stringify(this.props));\n  }\n}\n\nconst mapDispatchToProps = {\n  deleteTodo,\n  copyTodo,\n  toggleTodo\n}\n\nTodo = connect(\n  null,\n  mapDispatchToProps\n)(Todo)\n\nexport default Todo","import React, {Component} from 'react'\nimport Todo from '../containers/Todo'\n\nexport default class TodoList extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {date: new Date()};\n  }\n\n  render() {\n    let {todos} = this.props\n    return (\n      <ul className=\"list-group mt-2 mb-2\">\n        {todos.map((todo, idx) => (\n          <Todo\n            key={idx}\n            {...todo}\n            index={idx}/>\n        ))}\n      </ul>\n    )\n  }\n}\n\n","import {connect} from 'react-redux'\nimport {VisibilityFilters} from '../../../store/actions'\nimport TodoList from '../components/TodoList'\n\nconst getVisibleTodos = (todos, filter) => {\n  switch (filter) {\n    case VisibilityFilters.SHOW_ALL:\n      return todos\n    case VisibilityFilters.SHOW_COMPLETED:\n      return todos.filter(t => t.completed)\n    case VisibilityFilters.SHOW_ACTIVE:\n      return todos.filter(t => !t.completed)\n    default:\n      return todos;\n  }\n}\n\n\n// (一旦store被更新，应用中所有connect函数的第一个参数函数就会被call)\n// 将返回一个对象该对象会被合并到包装的组件的props。\nconst mapStateToProps = (state) => ({\n  todos: getVisibleTodos(state.todoApp.todos, state.todoApp.visibilityFilter)\n})\n\n/**\n * 如果传递的是一个函数，该函数将接收一个 dispatch 函数，然后由你来决定如何返回一个对象，这个对象通过 dispatch 函数与 action creator 以某种方式绑定在一起\n * （提示：你也许会用到 Redux 的辅助函数 bindActionCreators()。\n * */\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     onTodoClick: id => {\n//       // dispatch(addTodo(id))\n//       // dispatch(deleteTodo(id))\n//       dispatch(toggleTodo(id))\n//     }\n//   }\n// }\n\n/**\n * 1、如果传递的是一个对象，那么每个定义在该对象的函数都将被当作 Redux action creator，对象所定义的方法名将作为属性名；\n * 2、每个方法将返回一个新的函数，函数中dispatch方法会将 action creator 的返回值作为参数执行。\n * 3、这些属性会被合并到组件的 props 中。\n * */\n// const mapDispatchToProps = {\n//   addTodo,\n//   deleteTodo,\n//   toggleTodo\n// }\n\n/**\n * connect() 函数链接react的组件和redux的store。\n * @param mapStateToProps 如果此函数被指定那么新包装的组件会指定Redux store的更新。\n * @param mapDispatchToProps 如果你省略这个 mapDispatchToProps 参数，默认情况下，dispatch 会注入到你的组件 props 中。\n * */\nconst VisibleTodoList = connect(\n  mapStateToProps,\n  null\n)(TodoList)\n\nexport default VisibleTodoList","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Link = ({active, children, onClick}) => {\n  if (active) {\n    return <span>{children}</span>\n  }\n\n  return (\n    <a\n      href=\"\"\n      onClick={e => {\n        e.preventDefault()\n        onClick()\n      }}\n    >\n      {children}\n    </a>\n  )\n}\n\nLink.propTypes = {\n  active: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n  onClick: PropTypes.func.isRequired\n}\n\nexport default Link","import {connect} from 'react-redux'\nimport {setVisibilityFilter} from '../../../store/actions'\nimport Link from '../components/Link'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    active: ownProps.filter === state.visibilityFilter\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onClick: () => {\n      dispatch(setVisibilityFilter(ownProps.filter))\n    }\n  }\n}\n\nconst FilterLink = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Link)\n\nexport default FilterLink","import React from 'react'\nimport FilterLink from '../containers/FilterLink'\n\nconst Footer = () => (\n  <p>\n    Show: <FilterLink filter=\"SHOW_ALL\">All</FilterLink>\n    {', '}\n    <FilterLink filter=\"SHOW_ACTIVE\">Active</FilterLink>\n    {', '}\n    <FilterLink filter=\"SHOW_COMPLETED\">Completed</FilterLink>\n  </p>\n)\n\nexport default Footer","import './Task.css'\nimport React, {Component} from 'react';\nimport AddTodo from './containers/AddTodo'\nimport VisibleTodoList from './containers/VisibleTodoList'\nimport Footer from './components/Footer'\n\nexport default class Task extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"task-page\">\n        <h2 style={{borderBottom: \"1px solid #e4e4e4\"}}>任务列表🤦‍♂</h2>\n        <div className={'task-body'}>\n          <AddTodo/>\n          <VisibleTodoList/>\n          <Footer/>\n        </div>\n      </div>\n    )\n  }\n}"],"names":["AddTodo","_ref","input","dispatch","_jsx","children","onSubmit","e","preventDefault","value","trim","addTodo","_jsxs","className","type","placeholder","ref","node","connect","Todo","Component","constructor","super","this","state","date","Date","componentWillMount","console","log","props","render","completed","text","index","deleteTodo","copyTodo","toggleTodo","style","textDecoration","float","onClick","componentDidMount","componentWillReceiveProps","nextProps","componentWillUpdate","componentDidUpdate","JSON","stringify","componentWillUnmount","mapDispatchToProps","TodoList","todos","map","todo","idx","getVisibleTodos","filter","VisibilityFilters","SHOW_ALL","SHOW_COMPLETED","t","SHOW_ACTIVE","todoApp","visibilityFilter","active","href","mapStateToProps","ownProps","setVisibilityFilter","Link","Footer","FilterLink","Task","borderBottom","VisibleTodoList"],"sourceRoot":""}